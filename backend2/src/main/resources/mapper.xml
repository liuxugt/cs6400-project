<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cs6400.database.Mapper">
    <resultMap id="movieMap" type="movie" autoMapping="true"/>
    <resultMap id="companyMap" type="company" autoMapping="true" />
    <resultMap id="crewMovieMap" type="crew_movie" autoMapping="true"/>
    <resultMap id="castMovieMap" type="cast_movie" autoMapping="true"/>
    <resultMap id="movieMovieMap" type="movie_movie" autoMapping="true" />
    <resultMap id="companyMovieMap" type="company_movie" autoMapping="true"/>
    <resultMap id="genreMovieMap" type="genre_movie" autoMapping="true" />
    <resultMap id="movieCompanyMap" type="movie_company" autoMapping="true"/>
    <resultMap id="crewCompanyMap" type="crew_company" autoMapping="true" />
    <resultMap id="castCompanyMap" type="cast_company" autoMapping="true" />
    <resultMap id="companyCompanyMap" type="company_company" autoMapping="true" />
    <resultMap id="genreCompanyMap" type="genre_company" autoMapping="true" />
    <resultMap id="genreMap" type="genre" autoMapping="true"/>
    <resultMap id="histogramMap" type="histogram" autoMapping="true"/>

    <!--start the queries on movies-->
    <select id="getAllMovies" resultMap="movieMap">
        select id, title, vote_average, vote_count from movies LIMIT 10;
    </select>

    <select id="getMovieById" resultMap="movieMap">
        SELECT m.id, m.title, l.name AS language, m.vote_average AS average_rating, coun.name AS country, coll.name AS collection_name, m.release_date, m.status
        FROM movies AS m
        LEFT OUTER JOIN collections AS coll ON m.belongs_to_collection_id = coll.id
        JOIN movie_country_relation AS mcr ON mcr.movie_id = m.id
        JOIN countries AS coun ON coun.iso_3166_1 = mcr.country_id
        JOIN movie_language_relation AS mlr ON mlr.movie_id = m.id
        JOIN languages AS l ON l.iso_639_1 = mlr.language_id
        WHERE m.id = #{id}
    </select>

    <select id="getMovieByTitle" resultMap="movieMap">
        SELECT m.id, m.title, l.name AS language, m.vote_average AS average_rating, coun.name AS country, coll.name AS collection_name, m.release_date, m.status
        FROM movies AS m
        LEFT OUTER JOIN collections AS coll ON m.belongs_to_collection_id = coll.id
        JOIN movie_country_relation AS mcr ON mcr.movie_id = m.id
        JOIN countries AS coun ON coun.iso_3166_1 = mcr.country_id
        JOIN movie_language_relation AS mlr ON mlr.movie_id = m.id
        JOIN languages AS l ON l.iso_639_1 = mlr.language_id
        WHERE m.title = #{title}
    </select>
    <select id="getCompaniesRelatedToMovie" resultMap="companyMovieMap">
        SELECT c.name, SUM(m2.revenue) AS revenue FROM movies AS m
        JOIN movie_company_relation AS cmr ON cmr.movie_id = m.id
        JOIN companies AS c ON c.id = cmr.company_id
        JOIN movie_company_relation AS cmr2 ON cmr2.company_id = c.id
        JOIN movies AS m2 ON m2.id = cmr2.movie_id
        where m.id = #{id}
        group by c.name
    </select>
    <select id="getCrewsRelatedToMovie" resultMap="crewMovieMap">
        SELECT c.id, c.name, c.gender, mcr.department, mcr.job FROM crews AS c
        JOIN movie_crew_relation AS mcr ON mcr.crew_id = c.id
        where mcr.movie_id = #{id} and mcr.job = #{job}
    </select>
    <select id="getCastRelatedToMovie" resultMap="castMovieMap">
        SELECT c.id, c.name, c.gender, mcr.characters FROM crews AS c
        JOIN movie_cast_relation as mcr ON mcr.crew_id = c.id
        where mcr.movie_id = #{id}
        limit 10
    </select>

    <select id="getGenreRelatedToMovie" resultMap="genreMovieMap">
        SELECT g.id, g.name, AVG(vote_average) AS average_rating, count(*) AS movie_count FROM genres AS g
        JOIN movie_genre_relation as mgr ON mgr.genre_id = g.id
        JOIN movie_genre_relation as mgr2 ON mgr2.genre_id = g.id
        JOIN movies as m ON mgr2.movie_id = m.id
        WHERE mgr.movie_id = #{id}
        GROUP by g.id, g.name
        ORDER by AVG(vote_average) DESC
    </select>

    <select id="getMovieInSameCollection" resultMap="movieMovieMap">
        SELECT m.id, m.title, m.release_date, 1 AS order_rating, m.vote_average AS average_rating FROM movies AS m
        JOIN movies AS m2 ON m.belongs_to_collection_id = m2.belongs_to_collection_id
        WHERE m2.id = #{id} and m.id <![CDATA[ <> ]]> #{id}
    </select>

    <select id="getSimilarMovie" resultMap="movieMovieMap">
        WITH genre_number(num) as(
            select count(*) from movie_genre_relation where movie_id = #{id}
        ),
        same_company_number(id, num) as (
            select mcr1.movie_id, count(*) FROM movie_company_relation AS mcr1
            JOIN movie_company_relation AS mcr2 ON mcr2.company_id = mcr1.company_id
            WHERE mcr2.movie_id = #{id} and mcr1.movie_id <![CDATA[ <> ]]> #{id}
            GROUP BY mcr1.movie_id
            ORDER BY count(*)
        )
        SELECT m.id, m.title, m.release_date, count(*)/gn.num + ifnull(same.num, 0)/4 AS order_rating, m.vote_average AS average_rating, gn.num FROM movies AS m
        JOIN genre_number as gn
        JOIN movie_genre_relation AS mgr ON m.id = mgr.movie_id
        LEFT JOIN same_company_number AS same ON same.id = m.id
        WHERE mgr.genre_id in (
            SELECT mgr2.genre_id FROM movie_genre_relation AS mgr2
            WHERE mgr2.movie_id = #{id}
        ) AND m.status = "Released" AND m.id not in (
            SELECT m.id FROM movies AS m
            JOIN movies AS m2 ON m.belongs_to_collection_id = m2.belongs_to_collection_id
            WHERE m2.id = #{id}
        )
        GROUP BY m.id, m.title, m.release_date, gn.num, same.num, m.vote_average having gn.num >= count(*)
        ORDER BY order_rating DESC
        limit #{limit}
    </select>

    <select id="getSimilarMovieWithCrewCast" resultMap="movieMovieMap">
        WITH match_director(num, movie_id) AS(
            SELECT count(*), movie_id FROM movie_crew_relation AS mcr1
            JOIN (
                SELECT crew_id FROM movie_crew_relation WHERE movie_crew_relation.movie_id = #{id} and movie_crew_relation.job = "Director"
                LIMIT 5
            ) AS temp ON mcr1.crew_id = temp.crew_id
            WHERE mcr1.movie_id <![CDATA[ <> ]]> #{id} AND mcr1.job = "Director"
            GROUP BY movie_id
        ),
        match_writer(num, movie_id) AS (
            SELECT count(*), movie_id FROM movie_crew_relation AS mcr1
            JOIN (
                SELECT crew_id FROM movie_crew_relation WHERE movie_crew_relation.movie_id = #{id} and movie_crew_relation.job = "Screenplay"
                LIMIT 5
            ) AS temp ON mcr1.crew_id = temp.crew_id
            WHERE mcr1.movie_id <![CDATA[ <> ]]> #{id} AND mcr1.job = "Screenplay"
            GROUP BY movie_id
        ),
        match_cast(num, movie_id) AS(
            SELECT count(*), movie_id FROM movie_cast_relation AS mca1
            JOIN (
                SELECT crew_id FROM movie_cast_relation WHERE movie_cast_relation.movie_id = #{id}
                ORDER BY cast_order ASC LIMIT 10
            ) AS temp ON mca1.crew_id = temp.crew_id
            WHERE mca1.movie_id <![CDATA[ <> ]]> #{id}
            GROUP BY movie_id
            ORDER BY count(*) DESC
        )
        SELECT m.id, m.title, m.release_date, ifnull(md.num, 0) + ifnull(mw.num, 0) + ifnull(mc.num, 0) AS order_rating, m.vote_average AS average_rating FROM movies AS m
        LEFT JOIN match_director AS md ON md.movie_id = m.id
        LEFT JOIN match_writer AS mw ON mw.movie_id = m.id
        LEFT JOIN match_cast AS mc ON mc.movie_id = m.id
        WHERE m.id not in (
            SELECT id FROM movies WHERE movies.belongs_to_collection_id = ifnull(m.belongs_to_collection_id, 300000)
        )
        ORDER BY order_rating DESC
        LIMIT 5;
    </select>

    <!--start the query on companies-->
    <select id="getCompanyById" resultMap="companyMap">
        SELECT c.id AS id, c.name AS name, SUM(REVENUE), COUNT(*) FROM companies AS c
        JOIN movie_company_relation AS mcr ON mcr.company_id = c.id
        JOIN movies AS m ON m.id = mcr.movie_id
        WHERE c.id = #{id}
        GROUP BY c.id, c.name
    </select>
    
    <select id="getCompanyByName" resultMap="companyMap">
        SELECT c.id AS id, c.name AS name, SUM(REVENUE), COUNT(*) FROM companies AS c
        JOIN movie_company_relation AS mcr ON mcr.company_id = c.id
        JOIN movies AS m ON m.id = mcr.movie_id
        WHERE c.name = #{name}
        GROUP BY c.id, c.name
    </select>

    <select id="getCastRelatedToCompany" resultMap="castCompanyMap">
        SELECT cast_rating.name AS name, cast_rating.id AS id, cast_rating.gender AS gender, cast_rating.rating AS order_rating, COUNT(*) AS movie_count, AVG(movies.vote_average) AS average_rating
        FROM (
            SELECT close_cast.crew_name AS name, close_cast.id AS id, close_cast.gender AS gender, SUM(close_cast.rating) AS rating
            FROM (
                SELECT crews.name AS crew_name, crews.gender AS gender, crews.id AS id, genres.name AS genre_name, temp.company_genre_count AS company_genre_count, count(*) AS crew_genre_count,
                temp.company_genre_count * count(*) AS rating FROM crews
                JOIN movie_cast_relation AS mcr ON mcr.crew_id = crews.id
                JOIN movie_genre_relation AS mgr ON mgr.movie_id = mcr.movie_id
                JOIN genres ON genres.id = mgr.genre_id
                JOIN movie_company_relation ON mgr.movie_id = movie_company_relation.movie_id
                JOIN (
                    select mgr.genre_id AS genres_id, count(*) AS company_genre_count
                    FROM movie_genre_relation AS mgr
                    JOIN movie_company_relation AS mcr ON mgr.movie_id = mcr.movie_id
                    WHERE mcr.company_id = #{id}
                    GROUP BY mgr.genre_id
                    ) AS temp
                ON genres.id = genres_id
                WHERE movie_company_relation.company_id = #{id}
                GROUP BY crew_name, gender, id, genre_name, company_genre_count
                ) AS close_cast
            GROUP BY name, close_cast.id, gender
            ORDER BY SUM(close_cast.rating) DESC
            LIMIT 10) AS cast_rating
        JOIN movie_cast_relation ON movie_cast_relation.crew_id = cast_rating.id
        JOIN movies ON movies.id = movie_cast_relation.movie_id
        JOIN movie_company_relation ON movies.id = movie_company_relation.movie_id
        where movie_company_relation.company_id = #{id}
        GROUP BY name, cast_rating.id, cast_rating.gender, order_rating
        ORDER BY order_rating DESC
        LIMIT 10
    </select>

    <select id="getCrewRelatedToCompany" resultMap="crewCompanyMap">
        SELECT crew_rating.name AS name, crew_rating.id AS id, crew_rating.gender AS gender, crew_rating.job AS job, crew_rating.rating AS order_rating, COUNT(*) AS movie_count, AVG(movies.vote_average) AS average_rating
        FROM (
            SELECT close_crew.crew_name AS name, close_crew.id AS id, close_crew.gender AS gender, close_crew.job AS job, SUM(close_crew.rating) AS rating
            FROM (
                SELECT crews.name AS crew_name, crews.gender AS gender, crews.id AS id, genres.name AS genre_name, temp.company_genre_count AS company_genre_count, mcr.job AS job, count(*) AS crew_genre_count,
                temp.company_genre_count * count(*) AS rating FROM crews
                JOIN movie_crew_relation AS mcr ON mcr.crew_id = crews.id
                JOIN movie_genre_relation AS mgr ON mgr.movie_id = mcr.movie_id
                JOIN genres ON genres.id = mgr.genre_id
                JOIN movie_company_relation ON mgr.movie_id = movie_company_relation.movie_id
                JOIN (
                    SELECT mgr.genre_id AS genres_id, count(*) AS company_genre_count
                    FROM movie_genre_relation AS mgr
                    JOIN movie_company_relation AS mcr ON mgr.movie_id = mcr.movie_id
                    WHERE mcr.company_id = 6194
                    GROUP BY mgr.genre_id
                    )
                AS temp
                ON genres.id = genres_id
                WHERE movie_company_relation.company_id = 6194 AND mcr.job = "Director"
                GROUP BY crew_name, gender, id, genre_name, company_genre_count, mcr.job
                )
            AS close_crew
            GROUP BY name, close_crew.id, gender, close_crew.job
            ) AS crew_rating
        JOIN movie_crew_relation ON movie_crew_relation.crew_id = crew_rating.id
        JOIN movies ON movies.id = movie_crew_relation.movie_id
        JOIN movie_company_relation ON movies.id = movie_company_relation.movie_id
        where movie_company_relation.company_id = 6194 and movie_crew_relation.job = "Director"
        GROUP BY name, crew_rating.id, crew_rating.gender, order_rating, crew_rating.job
        ORDER BY order_rating DESC
        LIMIT 10
    </select>

    <select id="getGenreRelatedToCompany" resultMap="genreCompanyMap">
        SELECT genres.id AS id, genres.name AS name, count(*) AS movie_count, AVG(vote_average) AS average_rating FROM genres
        JOIN movie_genre_relation AS mgr ON mgr.genre_id = genres.id
        JOIN movie_company_relation AS mcr ON mcr.movie_id = mgr.movie_id
        JOIN movies AS m ON mgr.movie_id = m.id
        WHERE mcr.company_id = #{id}
        GROUP BY genres.id, genres.name
        ORDER BY COUNT(*) DESC;
    </select>

    <select id="getMovieRelatedToCompany" resultMap="movieCompanyMap">
        SELECT m.id, m.title, m.vote_average AS average_rating, m.popularity, m.release_date FROM movies AS m
        JOIN movie_company_relation AS mcr ON mcr.movie_id = m.id
        WHERE mcr.company_id = #{id} and m.status = "Released"
        ORDER BY m.popularity
        LIMIT 10
    </select>


    <select id="getSubordinate" resultMap="companyCompanyMap">
        with recursive subordinate AS (
            SELECT c.name, c.id, cc.parent_id FROM companies AS c
            LEFT OUTER JOIN parent_company AS cc ON cc.company_id = c.id
            WHERE c.id = #{id}

            UNION ALL

            SELECT c2.name, c2.id, cc2.parent_id FROM companies AS c2
            LEFT OUTER JOIN parent_company AS cc2 ON cc2.company_id = c2.id
            JOIN subordinate AS sub ON cc2.parent_id = sub.id
        )
        SELECT subordinate.id, subordinate.name, 1, SUM(movies.revenue) AS revenue, count(*) AS movie_count from subordinate
        JOIN movie_company_relation AS mco ON mco.company_id = subordinate.id
        JOIN movies ON mco.movie_id = movies.id
        GROUP BY subordinate.id, subordinate.name;
    </select>

    <select id = "getParentCompany" resultMap="companyCompanyMap">
        with recursive subordinate AS (
            SELECT c.name, c.id, cc.parent_id FROM companies AS c
            LEFT OUTER JOIN parent_company AS cc ON cc.company_id = c.id
            WHERE c.id = #{id}

            UNION ALL

            SELECT c2.name, c2.id, cc2.parent_id FROM companies AS c2
            LEFT OUTER JOIN parent_company AS cc2 ON cc2.company_id = c2.id
            JOIN subordinate AS sub ON sub.parent_id = c2.id
        )
        SELECT id, name from subordinate;
    </select>

    <select id="getSimilarCompany" resultMap="companyCompanyMap">
        WITH recursive subordinate AS (
            SELECT c.name, c.id, cc.parent_id FROM companies AS c
            LEFT OUTER JOIN parent_company AS cc ON cc.company_id = c.id
            WHERE c.id = #{parent_id}

            UNION ALL

            SELECT c2.name, c2.id, cc2.parent_id FROM companies AS c2
            LEFT OUTER JOIN parent_company AS cc2 ON cc2.company_id = c2.id
            JOIN subordinate AS sub ON cc2.parent_id = sub.id
        ),
        genre_count(num, genre_id) AS(
            SELECT count(*), genres.id FROM genres
            JOIN movie_genre_relation AS mgr ON mgr.genre_id = genres.id
            JOIN movie_company_relation AS mco ON mco.movie_id = mgr.movie_id
            RIGHT JOIN subordinate ON subordinate.id = mco.company_id
            GROUP BY genres.id
            ORDER BY count(*) DESC
            LIMIT 5
        )
        SELECT qualified_company.id, qualified_company.name, qualified_company.genre_count AS order_rating, SUM(movies.revenue) AS revenue, count(*) AS movie_count FROM (
            SELECT company_genre.id, company_genre.name, count(*) AS genre_count FROM (
                SELECT companies.id AS id, companies.name AS name , mgr.genre_id AS genre_id,
                    @company_rank := IF(@current_company = companies.name, @company_rank + 1, 1) AS company_rank,
                    @current_company := companies.name
                FROM companies
                JOIN movie_company_relation AS mco ON companies.id = mco.company_id
                JOIN movie_genre_relation AS mgr ON mgr.movie_id = mco.movie_id
                WHERE companies.id NOT IN (
                SELECT id FROM subordinate
                )
                GROUP BY companies.id, companies.name, genre_id
                ORDER BY count(*) DESC
                ) AS company_genre
            WHERE company_rank &lt;= 3
            GROUP BY id, name
            ORDER BY genre_count DESC
            ) AS qualified_company
        JOIN movie_company_relation AS mco ON mco.company_id = qualified_company.id
        JOIN movies ON mco.movie_id = movies.id
        GROUP BY qualified_company.id, qualified_company.name
        ORDER BY qualified_company.genre_count DESC, SUM(movies.revenue) DESC
        LIMIT 10
    </select>

    <!--For drawing the histogram-->
    <select id = "getHistogramByYear" resultMap="histogramMap">
        select count(*) AS rating, substring_index(release_date, "-", 1) AS split_element, AVG(vote_average) AS average_rating
        FROM movies
        JOIN movie_genre_relation ON movie_genre_relation.movie_id = movies.id
        WHERE substring_index(release_date, "-", 1) >= 2000 and movie_genre_relation.genre_id = #{id} and movies.status = "Released"
        GROUP BY substring_index(release_date, "-", 1)
        ORDER BY split_element ASC;
    </select>
    <select id = "getHistogramByDirectorOnMovie" resultMap="histogramMap">
        select SUM(movies.popularity) + ifnull(participate.bool, 0) * 5000 AS rating, c1.name AS split_element, AVG(vote_average) AS average_rating FROM crews AS c1
        JOIN movie_crew_relation AS mcr ON mcr.crew_id = c1.id AND mcr.job = "Director"
        JOIN movies ON mcr.movie_id = movies.id
        JOIN movie_genre_relation AS mgr ON mgr.movie_id = movies.id
        LEFT JOIN (
            SELECT count(*) AS bool, crew_id FROM movie_crew_relation WHERE movie_id = #{movie_id} AND job = "Director" GROUP BY id
        ) AS participate ON participate.crew_id = c1.id
        WHERE mgr.genre_id = #{id} and substring_index(movies.release_date, "-", 1) >= 2010
        GROUP BY participate.bool, split_element, c1.id
        ORDER BY rating DESC
        LIMIT 10
    </select>
    <select id="getHistogramByDirectorOnCompany" resultMap="histogramMap">
        select SUM(movies.popularity) + ifnull(participate.bool, 0) * 200 AS rating, c1.name AS split_element, AVG(vote_average) AS average_rating from crews AS c1
        JOIN movie_crew_relation AS mcr ON mcr.crew_id = c1.id AND mcr.job = "Director"
        JOIN movies ON mcr.movie_id = movies.id
        JOIN movie_genre_relation AS mgr ON mgr.movie_id = movies.id
        LEFT JOIN(
            SELECT count(*) AS bool, movie_crew_relation.crew_id AS crew_id FROM movie_crew_relation
            JOIN movie_company_relation ON movie_crew_relation.movie_id = movie_company_relation.movie_id
            WHERE movie_company_relation.company_id = #{company_id} AND job = "Director" GROUP BY movie_crew_relation.crew_id
        ) AS participate ON participate.crew_id = c1.id
        WHERE mgr.genre_id = #{id} and substring_index(movies.release_date, "-", 1) >= 2010
        GROUP BY participate.bool, split_element, c1.id
        ORDER BY rating DESC
        LIMIT 10
    </select>

    <select id="getGenre" resultMap="genreMap">
        select name, id from genres where name = #{name}
    </select>
</mapper>
